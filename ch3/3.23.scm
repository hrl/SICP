(define (make-deque)
  (let ((front-ptr '())
        (rear-ptr '()))
    (define (set-front-ptr! item) (set! front-ptr item))
    (define (set-rear-ptr! item) (set! rear-ptr item))
    (define (empty-deque?) (or (null? front-ptr) (null? rear-ptr)))
    (define (make-item data) (cons (cons data '()) '())) ; ((data prev-ptr) next-ptr)
    (define (set-item-prev-ptr! item prev-ptr) (set-cdr! (car item) prev-ptr))
    (define (set-item-next-ptr! item next-ptr) (set-cdr! item next-ptr))
    (define (get-item-prev-ptr item) (cdar item))
    (define (get-item-next-ptr item) (cdr item))
    (define (get-item-data item) (caar item))
    (define (get-front-data)
      (if (empty-deque?)
          (error "GET-FRONT-DATA! called with an empty deque" dispatch)
          (get-item-data front-ptr)))
    (define (get-rear-data)
      (if (empty-deque?)
          (error "GET-REAR-DATA! called with an empty deque" dispatch)
          (get-item-data rear-ptr)))
    (define (insert-front! data)
      (let ((new-item (make-item data)))
        (set-item-next-ptr! new-item front-ptr)
        (cond ((empty-deque?)
               (set-front-ptr! new-item)
               (set-rear-ptr! new-item)
               dispatch)
              (else
               (set-item-prev-ptr! front-ptr new-item)
               (set-front-ptr! new-item)
               dispatch))))
    (define (insert-rear! data)
      (let ((new-item (make-item data)))
        (set-item-prev-ptr! new-item rear-ptr)
        (cond ((empty-deque?)
               (set-front-ptr! new-item)
               (set-rear-ptr! new-item)
               dispatch)
              (else
               (set-item-next-ptr! rear-ptr new-item)
               (set-rear-ptr! new-item)
               dispatch))))
    (define (delete-front!)
      (cond ((empty-deque?)
             (error "DELETE-FRONT! called with an empty deque" dispatch))
            (else
             (set-front-ptr! (cdr front-ptr))
             (if (empty-deque?)
                 (set-rear-ptr! '())
                 (set-item-prev-ptr! front-ptr '()))
             dispatch)))
    (define (delete-rear!)
      (cond ((empty-deque?)
             (error "DELETE-REAR! called with an empty deque" dispatch))
            (else
             (set-rear-ptr! (get-item-prev-ptr rear-ptr))
             (if (empty-deque?)
                 (set-front-ptr! '())
                 (set-item-next-ptr! rear-ptr '()))
             dispatch)))
    (define (print-deque)
      (define (rec-print-item item)
        (if (not (null? item))
            (begin
              (display (get-item-data item))
              (display " ")
              (rec-print-item (get-item-next-ptr item)))))
      (display "( ")
      (rec-print-item front-ptr)
      (display ")"))
    (define (dispatch m)
      (cond ((eq? m 'set-front-ptr!) set-front-ptr!)
            ((eq? m 'set-rear-ptr!) set-rear-ptr!)
            ((eq? m 'empty-deque?) empty-deque?)
            ((eq? m 'get-front-data) get-front-data)
            ((eq? m 'get-rear-data) get-rear-data)
            ((eq? m 'insert-front!) insert-front!)
            ((eq? m 'insert-rear!) insert-rear!)
            ((eq? m 'delete-front!) delete-front!)
            ((eq? m 'delete-rear!) delete-rear!)
            ((eq? m 'print) print-deque)
            (else (error "Undefined operation -- MAKR-DEQUE" m))))
    dispatch))
