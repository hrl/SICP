(define (ripple-carry-adder An Bn Cin)
  (let ((Sn '(*Sn*))
        (Cout '()))
    (define (iter A B C S)
      (if (or (null? A) (null? B))
          '()
          (let ((Ci (make-wire))
                (Si (make-wire)))
            (full-adder (car A) (car B) C Si Ci)
            (set-cdr! S (cons Si '()))
            (set! Cout Ci)
            (iter (cdr A) (cdr B) Ci (cdr S)))))
    (iter An Bn Cin Sn)
    (cons (cdr Sn) Cout)))
