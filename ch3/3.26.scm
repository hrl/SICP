(define (make-table cmp)
  (define (make-tree entry-key entry-value left-branch right-branch)
    (define (lookup key)
      (let ((cmp-value (cmp key entry-key)))
        (cond ((= cmp-value 0)
               entry-value)
              ((< cmp-value 0)
               (if left-branch
                   ((left-branch 'lookup) key)
                   #f))
              ((> cmp-value 0)
               (if right-branch
                   ((right-branch 'lookup) key)
                   #f)))))
    (define (insert! key value)
      (let ((cmp-value (cmp key entry-key)))
        (cond ((= cmp-value 0)
               (set! entry-value value))
              ((< cmp-value 0)
               (if left-branch
                   ((left-branch 'insert!) key value)
                   (set! left-branch (make-tree key value #f #f))))
              ((> cmp-value 0)
               (if right-branch
                   ((right-branch 'insert!) key value)
                   (set! right-branch (make-tree key value #f #f)))))))
    (define (dispatch m)
      (cond ((eq? m 'lookup) lookup)
            ((eq? m 'insert!) insert!)
            (else (error "Unknown opereation -- TREE" m))))
    dispatch)
  (let ((local-table #f))
    (define (lookup key)
      (if local-table
          ((local-table 'lookup) key)
          #f))
    (define (insert! key value)
      (if local-table
          ((local-table 'insert!) key value)
          (set! local-table (make-tree key value #f #f)))
      #t)
    (define (dispatch m)
      (cond ((eq? m 'lookup) lookup)
            ((eq? m 'insert!) insert!)
            (else (error "Unknown opereation -- TABLE" m))))
    dispatch))
