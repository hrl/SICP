(define (equ? x y) (apply-generic 'equ? x y))

(define (install-scheme-number-package)
  ; ...
  (define (equ? x y)
    (= x y))
  ; ...
  (put 'equ? '(scheme-number scheme-number) equ?)
  ; ...
  )

(define (install-rational-package)
  ; ...
  (define (equ? x y)
    (and (= (numer x) (numer y)) (= (denom x) (denom y))))
  ; ...
  (put 'equ? '(rational rational) equ?)
  ; ...
  )

(define (install-complex-package)
  ; ...
  (define (equ? x y)
    (and (= (real-part x) (real-part y)) (= (imag-part x) (imag-part y))))
  ; ...
  (put 'equ? '(complex complex) equ?)
  ; ...
  )
